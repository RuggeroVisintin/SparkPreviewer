precision mediump 	float;

uniform sampler2D 	sampler;
uniform float		alpha;

varying vec2 		outUvs;
varying vec3 		outNormals;
varying vec3 		outPositions;

vec3			lightDirection = vec3(1.0, 0.0, 0.0);
vec3			lightColor = vec3(1.0, 1.0, 1.0);
vec4 			ambientColor = vec4(0.01, 0.01, 0.01, 1.0);

vec4 			calcPhong(in vec3 normals, in vec3 lightDirection, in vec3 lightColor)
{
	float diffuseFactor;

	if(gl_FrontFacing) {
		diffuseFactor = dot(normalize(normals), lightDirection);
	} else {
		diffuseFactor = dot(-normalize(normals), lightDirection);
	}
	
	vec4 diffuseColor = max(0.0, diffuseFactor) * vec4(lightColor, 1.0);
	
	return diffuseColor;
}

float			lambert(in vec3 normals, in vec3 lightDirection)
{
			vec3 N = normalize(normals);
			float NdotL = max(0.0, dot(N, lightDirection));
			
			return NdotL;
}

vec4			cookTorrance(in vec3 lightDirection, in vec3 lightColor, in vec3 normals)
{
	// set important material values
    float roughnessValue = 0.9; // 0 : smooth, 1: rough
    float F0 = 1.0; // fresnel reflectance at normal incidence
    float k = 0.2; // fraction of diffuse reflection (specular reflection = 1 - k)
    
    // interpolating normals will change the length of the normal, so renormalize the normal.
    vec3 normal = normalize(normals);
    
    // do the lighting calculation for each fragment.
    float NdotL = max(dot(normal, lightDirection), 0.0);
    
    vec3 realEye = vec3(0.0, 0.0, 1.0);
    
    float specular = 0.0;
    if(NdotL > 0.0)
    {
        vec3 eyeDir = normalize(realEye);

        // calculate intermediary values
        vec3 halfVector = normalize(lightDirection + eyeDir);
        float NdotH = max(dot(normal, halfVector), 0.0); 
        float NdotV = max(dot(normal, eyeDir), 0.0); // note: this could also be NdotL, which is the same value
        float VdotH = max(dot(eyeDir, halfVector), 0.0);
        float mSquared = roughnessValue * roughnessValue;
        
        // geometric attenuation
        float NH2 = 2.0 * NdotH;
        float g1 = (NH2 * NdotV) / VdotH;
        float g2 = (NH2 * NdotL) / VdotH;
        float geoAtt = min(1.0, min(g1, g2));
     
        // roughness (or: microfacet distribution function)
        // beckmann distribution function
        float r1 = 1.0 / ( 4.0 * mSquared * pow(NdotH, 4.0));
        float r2 = (NdotH * NdotH - 1.0) / (mSquared * NdotH * NdotH);
        float roughness = r1 * exp(r2);
        
        // fresnel
        // Schlick approximation
        float fresnel = pow(1.0 - VdotH, 5.0);
        fresnel *= (1.0 - F0);
        fresnel += F0;
        
        specular = (fresnel * geoAtt * roughness) / (NdotV * NdotL * 3.14);
    }
    
    //vec3 finalValue = lightColor * NdotL * (specular);
    vec3 finalValue = lightColor * NdotL * (k + specular * (1.0 - k));
    return vec4(finalValue, 1.0);
}

void main(void) 
{
	vec4 texel = texture2D(sampler, outUvs);
	//float diffuseFactor;
	//if(gl_FrontFacing) {
	//	diffuseFactor = dot(normalize(outNormals), -lightDirection);
	//} else {
	//	diffuseFactor = dot(-normalize(outNormals), -lightDirection);
	//}
	//
	//vec4 diffuseColor = max(0.0, diffuseFactor) * vec4(lightColor, 1.0);
	
	vec4 phong = calcPhong(outNormals, lightDirection, lightColor);
	//vec4 cook = cookTorrance(lightDirection, lightColor, outNormals);
	//float lambert = lambert(outNormals, lightDirection);
	
	if(texel.a < 1.0) discard;
	
	//vec4 diffuseColor = lambert * vec4(lightColor, 1.0);
	gl_FragColor = texel * phong + ambientColor;
}
