precision mediump 	float;

uniform sampler2D 	sampler;
uniform float		alpha;

varying vec2 		outUvs;
varying vec3 		outNormals;
varying vec3 		outPositions;

vec3			lightDirection = vec3(1.0, 0.0, 0.0);
vec3			lightColor = vec3(1.0, 1.0, 1.0);
vec4 			ambientColor = vec4(0.05, 0.05, 0.05, 1.0);

vec4 			calcPhong()
{
	float diffuseFactor;
	
	if(gl_FrontFacing) {
		diffuseFactor = dot(normalize(normals), lightDirection);
	} else {
		diffuseFactor = dot(-normalize(normals), lightDirection);
	}
	
	float specularFactor = 0.0;
	
	if(diffuseFactor > 0.0)
	{
		vec3 halfDir = normalize(lightDirection + vec3(0.0, 0.0, 1.0));
	    	float NdotH = max(dot(normalize(outNormals), halfDir), 0.0);
	    
	    	specularFactor = pow(NdotH, SPECULAR_INTENSITY);
    	}
	
	vec3 diffuseColor = (max(0.0, diffuseFactor) + specularFactor) * lightColor;
	return diffuseColor;
}

void main(void) 
{
	vec4 texel = texture2D(sampler, outUvs);
	vec3 phong = calcPhong();
	
	if(texel.a < 1.0) discard;

	gl_FragColor = texel * (phong + ambientColor);
}
